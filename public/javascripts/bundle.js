(()=>{"use strict";var t="en",e={},r={};function n(){return t}function o(t){return e[t]?t:r[t.toLowerCase()]?r[t.toLowerCase()]:void 0}function a(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.localeMatcher||"lookup";switch(r){case"lookup":case"best fit":return u(t);default:throw new RangeError('Invalid "localeMatcher" option: '.concat(r))}}function u(t){var e=o(t);if(e)return e;for(var r=t.split("-");t.length>1;){r.pop();var n=o(t=r.join("-"));if(n)return n}}var i={af:function(t){return 1==t?"one":"other"},am:function(t){return t>=0&&t<=1?"one":"other"},ar:function(t){var e=String(t).split("."),r=Number(e[0])==t&&e[0].slice(-2);return 0==t?"zero":1==t?"one":2==t?"two":r>=3&&r<=10?"few":r>=11&&r<=99?"many":"other"},ast:function(t){var e=!String(t).split(".")[1];return 1==t&&e?"one":"other"},be:function(t){var e=String(t).split("."),r=Number(e[0])==t,n=r&&e[0].slice(-1),o=r&&e[0].slice(-2);return 1==n&&11!=o?"one":n>=2&&n<=4&&(o<12||o>14)?"few":r&&0==n||n>=5&&n<=9||o>=11&&o<=14?"many":"other"},br:function(t){var e=String(t).split("."),r=Number(e[0])==t,n=r&&e[0].slice(-1),o=r&&e[0].slice(-2),a=r&&e[0].slice(-6);return 1==n&&11!=o&&71!=o&&91!=o?"one":2==n&&12!=o&&72!=o&&92!=o?"two":(3==n||4==n||9==n)&&(o<10||o>19)&&(o<70||o>79)&&(o<90||o>99)?"few":0!=t&&r&&0==a?"many":"other"},bs:function(t){var e=String(t).split("."),r=e[0],n=e[1]||"",o=!e[1],a=r.slice(-1),u=r.slice(-2),i=n.slice(-1),s=n.slice(-2);return o&&1==a&&11!=u||1==i&&11!=s?"one":o&&a>=2&&a<=4&&(u<12||u>14)||i>=2&&i<=4&&(s<12||s>14)?"few":"other"},cs:function(t){var e=String(t).split("."),r=e[0],n=!e[1];return 1==t&&n?"one":r>=2&&r<=4&&n?"few":n?"other":"many"},cy:function(t){return 0==t?"zero":1==t?"one":2==t?"two":3==t?"few":6==t?"many":"other"},da:function(t){var e=String(t).split("."),r=e[0],n=Number(e[0])==t;return 1!=t&&(n||0!=r&&1!=r)?"other":"one"},dsb:function(t){var e=String(t).split("."),r=e[0],n=e[1]||"",o=!e[1],a=r.slice(-2),u=n.slice(-2);return o&&1==a||1==u?"one":o&&2==a||2==u?"two":o&&(3==a||4==a)||3==u||4==u?"few":"other"},dz:function(t){return"other"},fil:function(t){var e=String(t).split("."),r=e[0],n=e[1]||"",o=!e[1],a=r.slice(-1),u=n.slice(-1);return o&&(1==r||2==r||3==r)||o&&4!=a&&6!=a&&9!=a||!o&&4!=u&&6!=u&&9!=u?"one":"other"},fr:function(t){return t>=0&&t<2?"one":"other"},ga:function(t){var e=String(t).split("."),r=Number(e[0])==t;return 1==t?"one":2==t?"two":r&&t>=3&&t<=6?"few":r&&t>=7&&t<=10?"many":"other"},gd:function(t){var e=String(t).split("."),r=Number(e[0])==t;return 1==t||11==t?"one":2==t||12==t?"two":r&&t>=3&&t<=10||r&&t>=13&&t<=19?"few":"other"},he:function(t){var e=String(t).split("."),r=e[0],n=!e[1],o=Number(e[0])==t,a=o&&e[0].slice(-1);return 1==t&&n?"one":2==r&&n?"two":n&&(t<0||t>10)&&o&&0==a?"many":"other"},is:function(t){var e=String(t).split("."),r=e[0],n=Number(e[0])==t,o=r.slice(-1),a=r.slice(-2);return n&&1==o&&11!=a||!n?"one":"other"},ksh:function(t){return 0==t?"zero":1==t?"one":"other"},lt:function(t){var e=String(t).split("."),r=e[1]||"",n=Number(e[0])==t,o=n&&e[0].slice(-1),a=n&&e[0].slice(-2);return 1==o&&(a<11||a>19)?"one":o>=2&&o<=9&&(a<11||a>19)?"few":0!=r?"many":"other"},lv:function(t){var e=String(t).split("."),r=e[1]||"",n=r.length,o=Number(e[0])==t,a=o&&e[0].slice(-1),u=o&&e[0].slice(-2),i=r.slice(-2),s=r.slice(-1);return o&&0==a||u>=11&&u<=19||2==n&&i>=11&&i<=19?"zero":1==a&&11!=u||2==n&&1==s&&11!=i||2!=n&&1==s?"one":"other"},mk:function(t){var e=String(t).split("."),r=e[0],n=e[1]||"",o=!e[1],a=r.slice(-1),u=r.slice(-2),i=n.slice(-1),s=n.slice(-2);return o&&1==a&&11!=u||1==i&&11!=s?"one":"other"},mt:function(t){var e=String(t).split("."),r=Number(e[0])==t&&e[0].slice(-2);return 1==t?"one":0==t||r>=2&&r<=10?"few":r>=11&&r<=19?"many":"other"},pa:function(t){return 0==t||1==t?"one":"other"},pl:function(t){var e=String(t).split("."),r=e[0],n=!e[1],o=r.slice(-1),a=r.slice(-2);return 1==t&&n?"one":n&&o>=2&&o<=4&&(a<12||a>14)?"few":n&&1!=r&&(0==o||1==o)||n&&o>=5&&o<=9||n&&a>=12&&a<=14?"many":"other"},pt:function(t){var e=String(t).split(".")[0];return 0==e||1==e?"one":"other"},ro:function(t){var e=String(t).split("."),r=!e[1],n=Number(e[0])==t&&e[0].slice(-2);return 1==t&&r?"one":!r||0==t||1!=t&&n>=1&&n<=19?"few":"other"},ru:function(t){var e=String(t).split("."),r=e[0],n=!e[1],o=r.slice(-1),a=r.slice(-2);return n&&1==o&&11!=a?"one":n&&o>=2&&o<=4&&(a<12||a>14)?"few":n&&0==o||n&&o>=5&&o<=9||n&&a>=11&&a<=14?"many":"other"},se:function(t){return 1==t?"one":2==t?"two":"other"},si:function(t){var e=String(t).split("."),r=e[0],n=e[1]||"";return 0==t||1==t||0==r&&1==n?"one":"other"},sl:function(t){var e=String(t).split("."),r=e[0],n=!e[1],o=r.slice(-2);return n&&1==o?"one":n&&2==o?"two":n&&(3==o||4==o)||!n?"few":"other"}};i.as=i.am,i.az=i.af,i.bg=i.af,i.bn=i.am,i.ca=i.ast,i.ce=i.af,i.chr=i.af,i.de=i.ast,i.ee=i.af,i.el=i.af,i.en=i.ast,i.es=i.af,i.et=i.ast,i.eu=i.af,i.fa=i.am,i.fi=i.ast,i.fo=i.af,i.fur=i.af,i.fy=i.ast,i.gl=i.ast,i.gu=i.am,i.hi=i.am,i.hr=i.bs,i.hsb=i.dsb,i.hu=i.af,i.hy=i.fr,i.ia=i.ast,i.id=i.dz,i.it=i.ast,i.ja=i.dz,i.jgo=i.af,i.jv=i.dz,i.ka=i.af,i.kea=i.dz,i.kk=i.af,i.kl=i.af,i.km=i.dz,i.kn=i.am,i.ko=i.dz,i.ku=i.af,i.ky=i.af,i.lb=i.af,i.lkt=i.dz,i.lo=i.dz,i.ml=i.af,i.mn=i.af,i.mr=i.am,i.ms=i.dz,i.my=i.dz,i.nb=i.af,i.ne=i.af,i.nl=i.ast,i.nn=i.af,i.or=i.af,i.ps=i.af,i["pt-PT"]=i.ast,i.sah=i.dz,i.sd=i.af,i.sk=i.cs,i.so=i.af,i.sq=i.af,i.sr=i.bs,i.sv=i.ast,i.sw=i.ast,i.ta=i.af,i.te=i.af,i.th=i.dz,i.ti=i.pa,i.tk=i.af,i.to=i.dz,i.tr=i.af,i.ug=i.af,i.uk=i.ru,i.ur=i.ast,i.uz=i.af,i.vi=i.dz,i.wae=i.af,i.yi=i.ast,i.yue=i.dz,i.zh=i.dz,i.zu=i.am;const s=i;function l(t){return"pt-PT"===t?t:function(t){var e=t.match(c);if(!e)throw new TypeError("Invalid locale: ".concat(t));return e[1]}(t)}var c=/^([a-z0-9]+)/i;function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var m=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=t.supportedLocalesOf(e);if(0===n.length)throw new RangeError("Unsupported locale: "+e);if(r&&"cardinal"!==r.type)throw new RangeError('Only "cardinal" "type" is supported');this.$=s[l(n[0])]}var e,r,n;return e=t,n=[{key:"supportedLocalesOf",value:function(t){return"string"==typeof t&&(t=[t]),t.filter((function(t){return s[l(t)]}))}}],(r=[{key:"select",value:function(t){return this.$(t)}}])&&f(e.prototype,r),n&&f(e,n),t}();function h(t){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function y(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){v(t,e,r[e])}))}return t}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=[],n=!0,o=!1,a=void 0;try{for(var u,i=t[Symbol.iterator]();!(n=(u=i.next()).done)&&(r.push(u.value),!e||r.length!==e);n=!0);}catch(t){o=!0,a=t}finally{try{n||null==i.return||i.return()}finally{if(o)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function b(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function v(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var w=["second","minute","hour","day","week","month","quarter","year"],g=["auto","always"],O=["long","short","narrow"],S=["lookup","best fit"],k=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};d(this,t),v(this,"numeric","always"),v(this,"style","long"),v(this,"localeMatcher","lookup");var o=r.numeric,u=r.style,i=r.localeMatcher;if(void 0!==o){if(g.indexOf(o)<0)throw new RangeError('Invalid "numeric" option: '.concat(o));this.numeric=o}if(void 0!==u){if(O.indexOf(u)<0)throw new RangeError('Invalid "style" option: '.concat(u));this.style=u}if(void 0!==i){if(S.indexOf(i)<0)throw new RangeError('Invalid "localeMatcher" option: '.concat(i));this.localeMatcher=i}if("string"==typeof e&&(e=[e]),e.push(n()),this.locale=t.supportedLocalesOf(e,{localeMatcher:this.localeMatcher})[0],!this.locale)throw new Error("No supported locale was found");m.supportedLocalesOf(this.locale).length>0?this.pluralRules=new m(this.locale):console.warn('"'.concat(this.locale,'" locale is not supported')),"undefined"!=typeof Intl&&Intl.NumberFormat?(this.numberFormat=new Intl.NumberFormat(this.locale),this.numberingSystem=this.numberFormat.resolvedOptions().numberingSystem):this.numberingSystem="latn",this.locale=a(this.locale,{localeMatcher:this.localeMatcher})}var r,o;return r=t,(o=[{key:"format",value:function(){var t=T(arguments),e=p(t,2),r=e[0],n=e[1];return this.getRule(r,n).replace("{0}",this.formatNumber(Math.abs(r)))}},{key:"formatToParts",value:function(){var t=T(arguments),e=p(t,2),r=e[0],n=e[1],o=this.getRule(r,n),a=o.indexOf("{0}");if(a<0)return[{type:"literal",value:o}];var u=[];return a>0&&u.push({type:"literal",value:o.slice(0,a)}),u=u.concat(this.formatNumberToParts(Math.abs(r)).map((function(t){return y({},t,{unit:n})}))),a+"{0}".length<o.length-1&&u.push({type:"literal",value:o.slice(a+"{0}".length)}),u}},{key:"getRule",value:function(t,r){var n,o=(n=this.locale,e[n])[this.style][r];if("auto"===this.numeric)if(-2===t||-1===t){var a=o["previous".concat(-1===t?"":"-"+Math.abs(t))];if(a)return a}else if(1===t||2===t){var u=o["next".concat(1===t?"":"-"+Math.abs(t))];if(u)return u}else if(0===t&&o.current)return o.current;var i,s=o[(i=t,i<0||0===i&&function(t){return 1/t==-1/0}(i)?"past":"future")];return"string"==typeof s?s:s[this.pluralRules&&this.pluralRules.select(Math.abs(t))||"other"]||s.other}},{key:"formatNumber",value:function(t){return this.numberFormat?this.numberFormat.format(t):String(t)}},{key:"formatNumberToParts",value:function(t){return this.numberFormat&&this.numberFormat.formatToParts?this.numberFormat.formatToParts(t):[{type:"integer",value:this.formatNumber(t)}]}},{key:"resolvedOptions",value:function(){return{locale:this.locale,style:this.style,numeric:this.numeric,numberingSystem:this.numberingSystem}}}])&&b(r.prototype,o),t}();k.supportedLocalesOf=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("string"==typeof t)t=[t];else if(!Array.isArray(t))throw new TypeError('Invalid "locales" argument');return t.filter((function(t){return a(t,e)}))},k.addLocale=function(t){if(!t)throw new Error("No locale data passed");e[t.locale]=t,r[t.locale.toLowerCase()]=t.locale},k.setDefaultLocale=function(e){t=e},k.getDefaultLocale=n,k.PluralRules=m;var j='Invalid "unit" argument';function A(t){if("symbol"===h(t))throw new TypeError(j);if("string"!=typeof t)throw new RangeError("".concat(j,": ").concat(t));if("s"===t[t.length-1]&&(t=t.slice(0,t.length-1)),w.indexOf(t)<0)throw new RangeError("".concat(j,": ").concat(t));return t}function P(t){if(t=Number(t),Number.isFinite&&!Number.isFinite(t))throw new RangeError("".concat('Invalid "number" argument',": ").concat(t));return t}function T(t){if(t.length<2)throw new TypeError('"unit" argument is required');return[P(t[0]),A(t[1])]}function x(t){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function N(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var E=function(){function t(){var e,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r={},(e="cache")in this?Object.defineProperty(this,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[e]=r}var e,r;return e=t,(r=[{key:"get",value:function(){for(var t=this.cache,e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];for(var o=0;o<r.length;o++){var a=r[o];if("object"!==x(t))return;t=t[a]}return t}},{key:"put",value:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];for(var n=e.pop(),o=e.pop(),a=this.cache,u=0;u<e.length;u++){var i=e[u];"object"!==x(a[i])&&(a[i]={}),a=a[i]}return a[o]=n}}])&&N(e.prototype,r),t}();function F(t){return(F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function D(t,e){var r=t,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var a;if(n){if(o>=r.length)break;a=r[o++]}else{if((o=r.next()).done)break;a=o.value}var u=a;if(e(u))return u;for(var i=u.split("-");i.length>1;)if(i.pop(),e(u=i.join("-")))return u}throw new Error("No locale data has been registered for any of the locales: ".concat(t.join(", ")))}var M=86400,R=7*M,I=2630016,q=31556952;function L(t){switch(t){case"second":return 1;case"minute":return 60;case"hour":return 3600;case"day":return M;case"week":return R;case"month":return I;case"year":return q}}function z(t){return void 0!==t.factor?t.factor:L(t.unit||t.formatAs)||1}function C(t){switch(t){case"floor":return Math.floor;default:return Math.round}}function U(t){switch(t){case"floor":return 1;default:return.5}}function _(t){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Y(t,e){var r,n=e.prevStep,o=e.timestamp,a=e.now,u=e.future,i=e.round;return n&&(n.id||n.unit)&&(r=t["threshold_for_".concat(n.id||n.unit)]),void 0===r&&void 0!==t.threshold&&"function"==typeof(r=t.threshold)&&(r=r(a,u)),void 0===r&&(r=t.minTime),"object"===_(r)&&(r=n&&n.id&&void 0!==r[n.id]?r[n.id]:r.default),"function"==typeof r&&(r=r(o,{future:u,getMinTimeForUnit:function(t,e){return J(t,e||n&&n.formatAs,{round:i})}})),void 0===r&&t.test&&(r=t.test(o,{now:a,future:u})?0:9007199254740991),void 0===r&&(n?t.formatAs&&n.formatAs&&(r=J(t.formatAs,n.formatAs,{round:i})):r=0),void 0===r&&console.warn("[javascript-time-ago] A step should specify `minTime`:\n"+JSON.stringify(t,null,2)),r}function J(t,e,r){var n,o=r.round,a=L(t);if(n=L("now"===e?t:e),void 0!==a&&void 0!==n)return a-n*(1-U(o))}function V(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){$(t,e,r[e])}))}return t}function $(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function B(t,e,r){var n=r.now,o=r.future,a=r.round,u=r.units,i=r.getNextStep,s=function(t,e,r){var n=r.now,o=r.future,a=r.round;if(0!==t.length){var u=G(t,e,{now:n,future:o||e<0,round:a});if(-1!==u){var i=t[u];return i.granularity&&0==C(a)(Math.abs(e)/z(i)/i.granularity)*i.granularity&&u>0?t[u-1]:i}}}(t=function(t,e){return t.filter((function(t){var r=t.unit,n=t.formatAs;return!(r=r||n)||e.indexOf(r)>=0}))}(t,u),e,{now:n,future:o,round:a});return i?s?[t[t.indexOf(s)-1],s,t[t.indexOf(s)+1]]:[void 0,void 0,t[0]]:s}function G(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=Y(t[n],V({prevStep:t[n-1],timestamp:r.now-1e3*e},r));return void 0===o||Math.abs(e)<o?n-1:n===t.length-1?n:G(t,e,r,n+1)}var H=31536e9;function K(t,e,r){var n=r.prevStep,o=r.nextStep,a=r.now,u=r.future,i=r.round,s=t.getTime?t.getTime():t,l=function(t){return function(t,e,r){var n=r.now,o=r.round;if(L(t)){var a=1e3*L(t),u=e>n,i=Math.abs(e-n),s=C(o)(i/a)*a;return u?s>0?i-s+function(t,e){return(1-U(t))*e+1}(o,a):i-s+1:-(i-s)+function(t,e){return U(t)*e}(o,a)}}(t,s,{now:a,round:i})},c=function(t,e,r){var n=r.now,o=r.future;if(t){var a=function(t,e,r){var n=r.now,o=r.future,a=Y(t,{timestamp:e,now:n,future:o,round:r.round,prevStep:r.prevStep});if(void 0!==a)return o?e-1e3*a+1:0===a&&e===n?H:e+1e3*a}(t,e,{now:n,future:o,round:r.round,prevStep:r.prevStep});if(void 0===a)return;return a-n}return o?e-n+1:H}(u?e:o,s,{future:u,now:a,round:i,prevStep:u?n:e});if(void 0!==c){var f;if(e&&(e.getTimeToNextUpdate&&(f=e.getTimeToNextUpdate(s,{getTimeToNextUpdateForUnit:l,getRoundFunction:C,now:a,future:u,round:i})),void 0===f)){var m=e.unit||e.formatAs;m&&(f=l(m))}return void 0===f?c:Math.min(f,c)}}var Q={};function W(t){return Q[t]}function X(t){if(!t)throw new Error("[javascript-time-ago] No locale data passed.");Q[t.locale]=t}const Z={steps:[{formatAs:"now"},{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"}],labels:"long"};function tt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const et=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){tt(t,e,r[e])}))}return t}({},Z,{steps:Z.steps.filter((function(t){return"second"!==t.formatAs}))}),rt=[{factor:1,unit:"now"},{threshold:1,threshold_for_now:45.5,factor:1,unit:"second"},{threshold:45.5,factor:60,unit:"minute"},{threshold:150,granularity:5,factor:60,unit:"minute"},{threshold:1350,factor:1800,unit:"half-hour"},{threshold:2550,threshold_for_minute:3150,factor:3600,unit:"hour"},{threshold:73800,factor:M,unit:"day"},{threshold:475200,factor:R,unit:"week"},{threshold:2116800,factor:I,unit:"month"},{threshold:27615168,factor:q,unit:"year"}],nt={gradation:rt,flavour:"long",units:["now","minute","hour","day","week","month","year"]},ot={gradation:rt,flavour:"long-time",units:["now","minute","hour","day","week","month","year"]};function at(t){return t instanceof Date?t:new Date(t)}var ut=[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"}],it={},st={minTime:function(t,e){return e.future,(0,e.getMinTimeForUnit)("day")},format:function(t,e){return it[e]||(it[e]={}),it[e].dayMonth||(it[e].dayMonth=new Intl.DateTimeFormat(e,{month:"short",day:"numeric"})),it[e].dayMonth.format(at(t))}},lt={minTime:function(t,e){return e.future?(t-(new Date(new Date(t).getFullYear(),0).getTime()-1))/1e3:(new Date(new Date(t).getFullYear()+1,0).getTime()-t)/1e3},format:function(t,e){return it[e]||(it[e]={}),it[e].dayMonthYear||(it[e].dayMonthYear=new Intl.DateTimeFormat(e,{year:"numeric",month:"short",day:"numeric"})),it[e].dayMonthYear.format(at(t))}};"object"===("undefined"==typeof Intl?"undefined":F(Intl))&&"function"==typeof Intl.DateTimeFormat?ut.push(st,lt):ut.push({formatAs:"day"},{formatAs:"week"},{formatAs:"month"},{formatAs:"year"});const ct={steps:ut,labels:["mini","short-time","narrow","short"]};function ft(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const mt=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){ft(t,e,r[e])}))}return t}({},ct,{steps:[{formatAs:"now"}].concat(ct.steps)});function ht(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const yt=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){ht(t,e,r[e])}))}return t}({},ct,{steps:ct.steps.filter((function(t){return"second"!==t.formatAs}))});function pt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const dt=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){pt(t,e,r[e])}))}return t}({},yt,{steps:[{formatAs:"now"}].concat(yt.steps)});function bt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){vt(t,e,r[e])}))}return t}function vt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const wt=bt({},ct,{steps:ct.steps.filter((function(t){return"second"!==t.formatAs})).map((function(t){return"minute"===t.formatAs?bt({},t,{minTime:60}):t}))}),gt={steps:[{formatAs:"second"},{formatAs:"minute"},{formatAs:"hour"},{formatAs:"day"},{formatAs:"month"},{formatAs:"year"}],labels:["mini","short-time","narrow","short"]};function Ot(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const St=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){Ot(t,e,r[e])}))}return t}({},gt,{steps:[{formatAs:"now"}].concat(gt.steps)});function kt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const jt=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){kt(t,e,r[e])}))}return t}({},gt,{steps:gt.steps.filter((function(t){return"second"!==t.formatAs}))});function At(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const Pt=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){At(t,e,r[e])}))}return t}({},jt,{steps:[{formatAs:"now"}].concat(jt.steps)});function Tt(t){return(Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function xt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Nt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Et,Ft=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.polyfill;xt(this,t),"string"==typeof e&&(e=[e]),this.locale=D(e.concat(t.getDefaultLocale()),W),"undefined"!=typeof Intl&&Intl.NumberFormat&&(this.numberFormat=new Intl.NumberFormat(this.locale)),!1===n?(this.IntlRelativeTimeFormat=Intl.RelativeTimeFormat,this.IntlPluralRules=Intl.PluralRules):(this.IntlRelativeTimeFormat=k,this.IntlPluralRules=k.PluralRules),this.relativeTimeFormatCache=new E,this.pluralRulesCache=new E}var e,r;return e=t,(r=[{key:"format",value:function(t,e,r){var n,o;r||(!e||"string"==typeof(n=e)||function(t){return void 0!==Tt(t)&&null!==t&&t.constructor===Mt}(o=n)&&(Array.isArray(o.steps)||Array.isArray(o.gradation)||Array.isArray(o.flavour)||"string"==typeof o.flavour||Array.isArray(o.labels)||"string"==typeof o.labels||Array.isArray(o.units)||"function"==typeof o.custom)?r={}:(r=e,e=void 0)),e||(e=et),"string"==typeof e&&(e=function(t){switch(t){case"default":case"round":return Z;case"round-minute":return et;case"approximate":return nt;case"time":case"approximate-time":return ot;case"mini":return gt;case"mini-now":return St;case"mini-minute":return jt;case"mini-minute-now":return Pt;case"twitter":return ct;case"twitter-now":return mt;case"twitter-minute":return yt;case"twitter-minute-now":return dt;case"twitter-first-minute":return wt;default:return nt}}(e));var a,u=function(t){if(t.constructor===Date||function(t){return"object"===Tt(t)&&"function"==typeof t.getTime}(t))return t.getTime();if("number"==typeof t)return t;throw new Error("Unsupported relative time formatter input: ".concat(Tt(t),", ").concat(t))}(t),i=this.getLabels(e.flavour||e.labels),s=i.labels,l=i.labelsType;void 0!==e.now&&(a=e.now),void 0===a&&void 0!==r.now&&(a=r.now),void 0===a&&(a=Date.now());var c=(a-u)/1e3,f=r.future||c<0,m=function(t,e,r,n){var o=t.now||e&&e.now;return o?"string"==typeof o?o:n?o.future:o.past:r&&r.second&&r.second.current?r.second.current:void 0}(s,W(this.locale).now,W(this.locale).long,f);if(e.custom){var h=e.custom({now:a,date:new Date(u),time:u,elapsed:c,locale:this.locale});if(void 0!==h)return h}var y,p,d=function(t,e,r){var n=Object.keys(e);return r&&n.push("now"),t&&(n=t.filter((function(t){return"now"===t||n.indexOf(t)>=0}))),n}(e.units,s,m),b=r.round||e.round,v=(y=B(e.gradation||e.steps||et.steps,c,{now:a,units:d,round:b,future:f,getNextStep:!0}),p=3,function(t){if(Array.isArray(t))return t}(y)||function(t,e){var r=[],n=!0,o=!1,a=void 0;try{for(var u,i=t[Symbol.iterator]();!(n=(u=i.next()).done)&&(r.push(u.value),!e||r.length!==e);n=!0);}catch(t){o=!0,a=t}finally{try{n||null==i.return||i.return()}finally{if(o)throw a}}return r}(y,p)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()),w=v[0],g=v[1],O=v[2],S=this.formatDateForStep(u,g,c,{labels:s,labelsType:l,nowLabel:m,now:a,future:f,round:b})||"";return r.getTimeToNextUpdate?[S,K(u,g,{nextStep:O,prevStep:w,now:a,future:f,round:b})]:S}},{key:"formatDateForStep",value:function(t,e,r,n){var o=this,a=n.labels,u=n.labelsType,i=n.nowLabel,s=n.now,l=n.future,c=n.round;if(e){if(e.format)return e.format(t,this.locale,{formatAs:function(t,e){return o.formatValue(e,t,{labels:a,future:l})},now:s,future:l});var f=e.unit||e.formatAs;if(!f)throw new Error("[javascript-time-ago] Each step must define either `formatAs` or `format()`. Step: ".concat(JSON.stringify(e)));if("now"===f)return i;var m=Math.abs(r)/z(e);e.granularity&&(m=C(c)(m/e.granularity)*e.granularity);var h=-1*Math.sign(r)*C(c)(m);switch(0===h&&(h=l?0:-0),u){case"long":case"short":case"narrow":return this.getFormatter(u).format(h,f);default:return this.formatValue(h,f,{labels:a,future:l})}}}},{key:"formatValue",value:function(t,e,r){var n=r.labels,o=r.future;return this.getFormattingRule(n,e,t,{future:o}).replace("{0}",this.formatNumber(Math.abs(t)))}},{key:"getFormattingRule",value:function(t,e,r,n){var o=n.future;if(this.locale,"string"==typeof(t=t[e]))return t;var a=t[0===r?o?"future":"past":r<0?"past":"future"]||t;return"string"==typeof a?a:a[this.getPluralRules().select(Math.abs(r))]||a.other}},{key:"formatNumber",value:function(t){return this.numberFormat?this.numberFormat.format(t):String(t)}},{key:"getFormatter",value:function(t){return this.relativeTimeFormatCache.get(this.locale,t)||this.relativeTimeFormatCache.put(this.locale,t,new this.IntlRelativeTimeFormat(this.locale,{style:t}))}},{key:"getPluralRules",value:function(){return this.pluralRulesCache.get(this.locale)||this.pluralRulesCache.put(this.locale,new this.IntlPluralRules(this.locale))}},{key:"getLabels",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];"string"==typeof t&&(t=[t]),t=(t=t.map((function(t){switch(t){case"tiny":case"mini-time":return"mini";default:return t}}))).concat("long");var e=W(this.locale),r=t,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var a;if(n){if(o>=r.length)break;a=r[o++]}else{if((o=r.next()).done)break;a=o.value}var u=a;if(e[u])return{labelsType:u,labels:e[u]}}}}])&&Nt(e.prototype,r),t}(),Dt="en";Ft.getDefaultLocale=function(){return Dt},Ft.setDefaultLocale=function(t){return Dt=t},Ft.addDefaultLocale=function(t){if(Et)throw new Error("[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.");Et=!0,Ft.setDefaultLocale(t.locale),Ft.addLocale(t)},Ft.addLocale=function(t){X(t),k.addLocale(t)},Ft.locale=Ft.addLocale,Ft.addLabels=function(t,e,r){var n=W(t);n||(X({locale:t}),n=W(t)),n[e]=r};var Mt={}.constructor;const Rt=JSON.parse('{"locale":"en","long":{"year":{"previous":"last year","current":"this year","next":"next year","past":{"one":"{0} year ago","other":"{0} years ago"},"future":{"one":"in {0} year","other":"in {0} years"}},"quarter":{"previous":"last quarter","current":"this quarter","next":"next quarter","past":{"one":"{0} quarter ago","other":"{0} quarters ago"},"future":{"one":"in {0} quarter","other":"in {0} quarters"}},"month":{"previous":"last month","current":"this month","next":"next month","past":{"one":"{0} month ago","other":"{0} months ago"},"future":{"one":"in {0} month","other":"in {0} months"}},"week":{"previous":"last week","current":"this week","next":"next week","past":{"one":"{0} week ago","other":"{0} weeks ago"},"future":{"one":"in {0} week","other":"in {0} weeks"}},"day":{"previous":"yesterday","current":"today","next":"tomorrow","past":{"one":"{0} day ago","other":"{0} days ago"},"future":{"one":"in {0} day","other":"in {0} days"}},"hour":{"current":"this hour","past":{"one":"{0} hour ago","other":"{0} hours ago"},"future":{"one":"in {0} hour","other":"in {0} hours"}},"minute":{"current":"this minute","past":{"one":"{0} minute ago","other":"{0} minutes ago"},"future":{"one":"in {0} minute","other":"in {0} minutes"}},"second":{"current":"now","past":{"one":"{0} second ago","other":"{0} seconds ago"},"future":{"one":"in {0} second","other":"in {0} seconds"}}},"short":{"year":{"previous":"last yr.","current":"this yr.","next":"next yr.","past":"{0} yr. ago","future":"in {0} yr."},"quarter":{"previous":"last qtr.","current":"this qtr.","next":"next qtr.","past":{"one":"{0} qtr. ago","other":"{0} qtrs. ago"},"future":{"one":"in {0} qtr.","other":"in {0} qtrs."}},"month":{"previous":"last mo.","current":"this mo.","next":"next mo.","past":"{0} mo. ago","future":"in {0} mo."},"week":{"previous":"last wk.","current":"this wk.","next":"next wk.","past":"{0} wk. ago","future":"in {0} wk."},"day":{"previous":"yesterday","current":"today","next":"tomorrow","past":{"one":"{0} day ago","other":"{0} days ago"},"future":{"one":"in {0} day","other":"in {0} days"}},"hour":{"current":"this hour","past":"{0} hr. ago","future":"in {0} hr."},"minute":{"current":"this minute","past":"{0} min. ago","future":"in {0} min."},"second":{"current":"now","past":"{0} sec. ago","future":"in {0} sec."}},"narrow":{"year":{"previous":"last yr.","current":"this yr.","next":"next yr.","past":"{0} yr. ago","future":"in {0} yr."},"quarter":{"previous":"last qtr.","current":"this qtr.","next":"next qtr.","past":{"one":"{0} qtr. ago","other":"{0} qtrs. ago"},"future":{"one":"in {0} qtr.","other":"in {0} qtrs."}},"month":{"previous":"last mo.","current":"this mo.","next":"next mo.","past":"{0} mo. ago","future":"in {0} mo."},"week":{"previous":"last wk.","current":"this wk.","next":"next wk.","past":"{0} wk. ago","future":"in {0} wk."},"day":{"previous":"yesterday","current":"today","next":"tomorrow","past":{"one":"{0} day ago","other":"{0} days ago"},"future":{"one":"in {0} day","other":"in {0} days"}},"hour":{"current":"this hour","past":"{0} hr. ago","future":"in {0} hr."},"minute":{"current":"this minute","past":"{0} min. ago","future":"in {0} min."},"second":{"current":"now","past":"{0} sec. ago","future":"in {0} sec."}},"now":{"now":{"current":"now","future":"in a moment","past":"just now"}},"mini":{"year":"{0}yr","month":"{0}mo","week":"{0}wk","day":"{0}d","hour":"{0}h","minute":"{0}m","second":"{0}s","now":"now"},"short-time":{"year":"{0} yr.","month":"{0} mo.","week":"{0} wk.","day":{"one":"{0} day","other":"{0} days"},"hour":"{0} hr.","minute":"{0} min.","second":"{0} sec."},"long-time":{"year":{"one":"{0} year","other":"{0} years"},"month":{"one":"{0} month","other":"{0} months"},"week":{"one":"{0} week","other":"{0} weeks"},"day":{"one":"{0} day","other":"{0} days"},"hour":{"one":"{0} hour","other":"{0} hours"},"minute":{"one":"{0} minute","other":"{0} minutes"},"second":{"one":"{0} second","other":"{0} seconds"}}}');Ft.addDefaultLocale(Rt);var It=document.querySelectorAll(".post-date"),qt=new Ft("en-US");It.forEach((function(t){t.innerText=qt.format(new Date(t.innerText))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,